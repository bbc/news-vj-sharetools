/* jshint ignore:start */

// John Resig - http://ejohn.org/ - MIT Licensed
define('lib/template_engine',[],function () {
  var cache = {},
      tmpl = function tmpl(str, data) {
    // Figure out if we're getting a template, or if we need to
    // load the template - and be sure to cache the result.

    var fn = !/\W/.test(str) ?
      cache[str] = cache[str] ||
        tmpl(document.getElementById(str).innerHTML) :

      // Generate a reusable function that will serve as a template
      // generator (and which will be cached).
      new Function("obj",
        "var p=[],print=function(){p.push.apply(p,arguments);};" +

        // Introduce the data as local variables using with(){}
        "with(obj){p.push('" +

        // Convert the template into pure JavaScript
        str
          .replace(/[\r\t\n]/g, " ")
          .split("<%").join("\t")
          .replace(/((^|%>)[^\t]*)'/g, "$1\r")
          .replace(/\t=(.*?)%>/g, "',$1,'")
          .split("\t").join("');")
          .split("%>").join("p.push('")
          .split("\r").join("\\'")
      + "');}return p.join('');");

    // Provide some basic currying to the user
    return data ? fn( data ) : fn;
  };
  return tmpl;
});

/* jshint ignore:end */;
define('ShareToolsView',['lib/template_engine'], function (templateEngine) {

    var ShareToolsView = function (options) {
        this.networks  = options.networkNames;
        this.template  = options.config.template;
        this.label     = options.config.label;
        this.holderEl  = options.config.holderEl;

        if (!this.template) {
            throw new Error('ShareTools: Template markup was not supplied');
        }

        this.render();
    };

    ShareToolsView.prototype = {

        render: function () {
            var templateValues = {
                label: this.label,
                networks: this.networks
            };
            var generatedElMarkup = templateEngine(this.template, templateValues);
            var holderEl = document.querySelector(this.holderEl);

            if (holderEl) {
                holderEl.innerHTML = generatedElMarkup;
            }
        },

        getHolderElement: function () {
            return this.holderEl;
        }

    };

    return ShareToolsView;

});
define('ShareToolsModel',[],function () {

    var ShareToolsModel = function () {};

    ShareToolsModel.prototype = {

        setShareUrl: function (shareUrl) {
            this.shareUrl = shareUrl || 'http://www.bbc.co.uk';
        },

        getShareUrl: function () {
            return this.shareUrl;
        },

        setMessage: function (message) {
            if (this.validate) {
                this.validate(message);
            }
            this.message = message;
        },

        getMessage: function () {
            return this.message;
        }

    };

    return ShareToolsModel;
});

define('models/Email',['ShareToolsModel'], function (ShareToolsModel) {

    var EmailModel = function () {};

    EmailModel.prototype = Object.create(ShareToolsModel.prototype);

    EmailModel.prototype.validate = function (message) {
        if (!message || !message.subject || !message.message) {
            throw new Error('ShareTools: Email message requires a "subject" and a "message"');
        }
    };

    EmailModel.prototype.shareEndpoint = 'mailto:';

    EmailModel.prototype.popup = false;

    EmailModel.prototype.parameters = function () {
        return {
            'subject': this.getMessage().subject,
            'body':    this.getMessage().message + ' ' + this.getShareUrl()
        };
    };

    return EmailModel;
});

define('models/Facebook',['ShareToolsModel'], function (ShareToolsModel) {

    var FacebookModel = function () {};

    FacebookModel.prototype = Object.create(ShareToolsModel.prototype);

    FacebookModel.prototype.validate = function (message) {
        if (!message || !message.title) {
            throw new Error('ShareTools: Facebook message requires a "title"');
        }

        message.description = message.description || 'Shared via BBC News';
        message.image = message.image || 'http://www.bbc.co.uk/news/special/2015/newsspec_10857/bbc_news_logo.png';
    };

    FacebookModel.prototype.shareEndpoint = 'https://www.facebook.com/dialog/feed';

    FacebookModel.prototype.popup = true;

    FacebookModel.prototype.parameters = function () {
        return {
            'app_id':       '58567469885',
            'redirect_uri': 'http://www.bbc.co.uk/news/special/shared/vj_sharetools/fb_red_uri.html?st_cb=facebook#state=feed',
            'display':      'popup',
            'locale':       'en_GB',
            'link':         this.getShareUrl(),
            'name':         this.getMessage().title,
            'description':  this.getMessage().description,
            'picture':      this.getMessage().image
        };
    };

    return FacebookModel;
});


define('models/Twitter',['ShareToolsModel'], function (ShareToolsModel) {

    var TwitterModel = function () {};

    TwitterModel.prototype = Object.create(ShareToolsModel.prototype);

    TwitterModel.prototype.validate = function (message) {
        if (!message) {
            throw new Error('ShareTools: Twitter message must be set');
        }
    };

    TwitterModel.prototype.shareEndpoint = 'https://twitter.com/intent/tweet';

    TwitterModel.prototype.popup = true;

    TwitterModel.prototype.parameters = function () {
        return {
            'text': this.getMessage() + ' ' + this.getShareUrl()
        }
    };

    return TwitterModel;
});

define('ShareToolsModelFactory',['ShareToolsModel', 'models/Email', 'models/Facebook', 'models/Twitter'], function (ShareToolsModel, Email, Facebook, Twitter) {

    var knownModels = {
        'email':    Email,
        'facebook': Facebook,
        'twitter':  Twitter
    },
    modelObjects = {};

    return {

        setMessages: function (messages) {
            if (Object.keys(modelObjects).length === 0) {
                this.initialiseModels(messages);
            }
            else {
                var networkConfig,
                    networkName;

                for (networkName in messages) {
                    if (messages.hasOwnProperty(networkName)) {
                        networkConfig = messages[networkName];
                        if (!modelObjects[networkName]) { // new network was added AFTER initialisation
                            this.initialiseModel(networkName, networkConfig);
                        }
                        modelObjects[networkName].setMessage(networkConfig);
                    }
                }
            }
        },

        setShareUrl: function (shareUrl) {
            var modelName,
                modelObject;

            for (modelName in modelObjects) {
                if (modelObjects.hasOwnProperty(modelName)) {
                    modelObject = modelObjects[modelName];
                    modelObject.setShareUrl(shareUrl);
                }
            }
        },

        initialiseModels: function (messages) {
            for (var networkName in messages) {
                this.initialiseModel(networkName, messages[networkName]);
            }
        },

        initialiseModel: function (networkName, networkConfig) {
            var modelObject;

            if (!knownModels[networkName]) {
                knownModels[networkName] = this.defineCustomNetwork(networkName, networkConfig);
            }

            modelObject = new knownModels[networkName]();
            modelObject.setMessage(networkConfig);
            modelObjects[networkName] = modelObject;
        },

        defineCustomNetwork: function (networkName, networkConfig) {
            var CustomNetwork = function () {};
            CustomNetwork.prototype = Object.create(ShareToolsModel.prototype);
            CustomNetwork.prototype.popup         = ( networkConfig.popup === true );
            CustomNetwork.prototype.shareEndpoint = networkConfig.shareEndpoint;

            if (!networkConfig.shareEndpoint) {
                throw new Error('ShareTools: no shareEndpoint property supplied for custom network "' + networkName + '"');
            }

            var parameters = {};
            for (var parameter in networkConfig.properties) {
                if (networkConfig.properties.hasOwnProperty(parameter)) {
                    parameters[parameter] = networkConfig.properties[parameter];
                }
            }

            CustomNetwork.prototype.parameters = function () {
                return parameters;
            }

            return CustomNetwork;
        },

        getNetworkConfig: function (name) {
            return modelObjects[name];
        }
    };
});

define('ShareTools', ['ShareToolsView', 'ShareToolsModelFactory'], function (ShareToolsView, ShareToolsModelFactory) {

    var ShareToolsController = function (options) {
        this.options = options;
        this.view = new ShareToolsView({
            networkNames: this.getNetworkNames(),
            config:       options
        });
        this.setMessages(this.options.messages);
        this.setShareUrl(this.options.shareUrl);
        this.setElSelectors();
        this.addListeners();
    };

    ShareToolsController.prototype = {

        setMessages: function (messages) {
            ShareToolsModelFactory.setMessages(messages);
        },

        setShareUrl: function (shareUrl) {
            ShareToolsModelFactory.setShareUrl(shareUrl);
        },

        openShareWindow: function (network) {
            var shareTargetUrl = this.getShareTargetUrl(network);
            var networkConfig  = ShareToolsModelFactory.getNetworkConfig(network);

            if (networkConfig.popup) {
                window.open(shareTargetUrl, '_blank', 'width=626,height=235');
            } else {
                window.location.href = shareTargetUrl;
            }
        },

        getShareTargetUrl: function (network) {
            var networkConfig  = ShareToolsModelFactory.getNetworkConfig(network);
            var parameters     = networkConfig.parameters();
            var urlQueryString = this.buildQueryStringFrom(parameters);

            return networkConfig.shareEndpoint + urlQueryString;
        },

        buildQueryStringFrom: function (parameters) {
            var queryString = '?';
            for (var parameterName in parameters) {
                if (parameters.hasOwnProperty(parameterName)) {
                    var parameterValue = parameters[parameterName];
                    queryString += parameterName + '=' + encodeURIComponent(parameterValue) + '&';
                }
            }
            // Remove trailing & or ?
            return queryString.slice(0, -1);
        },

        getNetworkNames: function () {
            var networks = [];

            for (var key in this.options.messages) {
                if (this.options.messages.hasOwnProperty(key)) {
                    networks.push(key);
                }
            }

            return networks;
        },

        setElSelectors: function () {
            var holderEl = this.view.getHolderElement();
            this.shareButton   = document.querySelector(holderEl + ' .share__button');
            this.toggleOverlay = document.querySelector(holderEl + ' .share__overlay');
            this.closeButton   = document.querySelector(holderEl + ' .share__overlay-close');
            this.networks      = document.querySelectorAll(holderEl + ' .share__tool--network');
        },

        addListeners: function () {
            var self = this;
            if(this.shareButton && this.toggleOverlay) {
                this.shareButton.addEventListener('click', function () {
                    self.toggleShareOverlay();
                });
                this.closeButton.addEventListener('click', function () {
                    self.toggleShareOverlay();
                });
            }
            if (this.networks) {
                for (var i = 0; i < this.networks.length; i++) {
                    this.networks[i].addEventListener('click', function (e) {
                        self.networkClicked(e);
                    });
                }
            }
        },

        toggleShareOverlay: function () {
            if (this.toggleOverlay) {
                this.toggleOverlay.style.display = (this.toggleOverlay.style.display === 'block') ? 'none' : 'block';
            }
        },

        networkClicked: function (event) {

            console.log(event);

            var networkClicked = event.target.getAttribute('data-network');

            this.openShareWindow(networkClicked);
            this.toggleShareOverlay();

            return false;
        }

    };

    return ShareToolsController;

});
