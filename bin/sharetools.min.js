/* jshint ignore:start */

// John Resig - http://ejohn.org/ - MIT Licensed
define('lib/template_engine',[],function () {
  var cache = {},
      tmpl = function tmpl(str, data) {
    // Figure out if we're getting a template, or if we need to
    // load the template - and be sure to cache the result.

    var fn = !/\W/.test(str) ?
      cache[str] = cache[str] ||
        tmpl(document.getElementById(str).innerHTML) :

      // Generate a reusable function that will serve as a template
      // generator (and which will be cached).
      new Function("obj",
        "var p=[],print=function(){p.push.apply(p,arguments);};" +

        // Introduce the data as local variables using with(){}
        "with(obj){p.push('" +

        // Convert the template into pure JavaScript
        str
          .replace(/[\r\t\n]/g, " ")
          .split("<%").join("\t")
          .replace(/((^|%>)[^\t]*)'/g, "$1\r")
          .replace(/\t=(.*?)%>/g, "',$1,'")
          .split("\t").join("');")
          .split("%>").join("p.push('")
          .split("\r").join("\\'")
      + "');}return p.join('');");

    // Provide some basic currying to the user
    return data ? fn( data ) : fn;
  };
  return tmpl;
});

/* jshint ignore:end */;
define('ShareToolsView',['jquery', 'lib/template_engine'], function ($, templateEngine) {

    var ShareToolsView = function (options) {
        var ShareToolsView = this;
        this.controller = options.controller;

        this.config = options.config;
        this.template = options.config.template;
        this.label = options.config.label;

        this.$holderEl = options.config.holderEl;

        if (!this.template) {
            throw new Error('ShareTools: Template not found');
        }

        this.render();
        this.setElSelectors();
        this.addListeners();
    };

    ShareToolsView.prototype = {

        render: function () {
            var templateValues = {
                label: this.label,
                networks: this.controller.getNetworkNames()
            };
            var generatedElMarkup = templateEngine(this.template, templateValues);
            this.$el = $(generatedElMarkup);

            this.$holderEl.empty();
            this.$holderEl.append(this.$el);
        },

        setElSelectors: function () {
            this.$shareButton = this.$el.find('.share__button');
            this.$toggleOverlay = this.$el.find('.share__overlay');
            this.$closeButton = this.$el.find('.share__overlay-close');
            this.$networks = this.$el.find('.share__tool--network');
        },

        addListeners: function () {
            var self = this;
            if(this.$shareButton && this.$toggleOverlay) {
                this.$shareButton.on('click', function () {
                    self.toggleShareOverlay();
                });
                this.$closeButton.on('click', function () {
                    self.toggleShareOverlay();
                });
            }
            this.$networks.on('click', function (e) {
                self.networkClicked(e);
            });
        },

        toggleShareOverlay: function () {
            if (this.$toggleOverlay) {
                this.$toggleOverlay.toggle();
            }
        },

        networkClicked: function (event) {
            var networkClicked = $(event.currentTarget).data('network');

            this.controller.openShareWindow(networkClicked);
            this.toggleShareOverlay();

            return false;
        }

    };

    return ShareToolsView;

});

define('ShareToolsModel',[],function () {

    var ShareToolsModel = function () {};

    ShareToolsModel.prototype = {

        setShareUrl: function (shareUrl) {
            this.shareUrl = shareUrl || 'http://www.bbc.co.uk';
        },

        getShareUrl: function () {
            return this.shareUrl;
        },

        setMessage: function (message) {
            this.validate(message);
            this.message = message;
        },

        getMessage: function () {
            return this.message;
        }

    };

    return ShareToolsModel;
});

define('models/Email',['ShareToolsModel'], function (ShareToolsModel) {

    var EmailModel = function () {};

    EmailModel.prototype = Object.create(ShareToolsModel.prototype);

    EmailModel.prototype.validate = function (message) {
        if (!message || !message.subject || !message.message) {
            throw new Error('ShareTools: Email message requires a "subject" and a "message"');
        }
    };

    EmailModel.prototype.shareEndpoint = 'mailto:';

    EmailModel.prototype.popup = false;

    EmailModel.prototype.parameters = function () {
        return {
            'subject': this.getMessage().subject,
            'body':    this.getMessage().message + ' ' + this.getShareUrl()
        };
    };

    return EmailModel;
});

define('models/Facebook',['ShareToolsModel'], function (ShareToolsModel) {

    var FacebookModel = function () {};

    FacebookModel.prototype = Object.create(ShareToolsModel.prototype);

    FacebookModel.prototype.validate = function (message) {
        if (!message || !message.title) {
            throw new Error('ShareTools: Facebook message requires a "title"');
        }

        message.description = message.description || 'Shared via BBC News';
        message.image = message.image || 'http://www.bbc.co.uk/news/special/2015/newsspec_10857/bbc_news_logo.png';
    };

    FacebookModel.prototype.shareEndpoint = 'https://www.facebook.com/dialog/feed';

    FacebookModel.prototype.popup = true;

    FacebookModel.prototype.parameters = function () {
        return {
            'app_id':       '58567469885',
            'redirect_uri': 'http://www.bbc.co.uk/news/special/shared/vj_sharetools/fb_red_uri.html?st_cb=facebook#state=feed',
            'display':      'popup',
            'locale':       'en_GB',
            'link':         this.getShareUrl(),
            'name':         this.getMessage().title,
            'description':  this.getMessage().description,
            'picture':      this.getMessage().image
        };
    };

    return FacebookModel;
});


define('models/Twitter',['ShareToolsModel'], function (ShareToolsModel) {

    var TwitterModel = function () {};

    TwitterModel.prototype = Object.create(ShareToolsModel.prototype);

    TwitterModel.prototype.validate = function (message) {
        if (!message) {
            throw new Error('ShareTools: Twitter message must be set');
        }
    };

    TwitterModel.prototype.shareEndpoint = 'https://twitter.com/intent/tweet';

    TwitterModel.prototype.popup = true;

    TwitterModel.prototype.parameters = function () {
        return {
            'text': this.getMessage() + ' ' + this.getShareUrl()
        }
    };

    return TwitterModel;
});

define('ShareToolsModelFactory',['models/Email', 'models/Facebook', 'models/Twitter'], function (Email, Facebook, Twitter) {

    var __ModelDictionary = {
        'email':    Email,
        'facebook': Facebook,
        'twitter':  Twitter
    },
    modelObjects = {};

    return {
        setMessages: function (messages, shareUrl) {
            for (var key in messages) {
                var modelObject = new __ModelDictionary[key]();
                modelObject.setShareUrl(shareUrl);
                modelObject.setMessage(messages[key]);
                modelObjects[key] = modelObject;
            }
        },
        getNetworkConfig: function (name) {
            return modelObjects[name];
        }
    };
});

define('ShareTools', ['ShareToolsView', 'ShareToolsModelFactory'], function (ShareToolsView, ShareToolsModelFactory) {

    var ShareToolsController = function (options) {
        this.options = options;
        this.view = new ShareToolsView({
            controller: this,
            config: options
        });
        this.setMessages(this.options.messages, this.options.shareUrl);
    };

    ShareToolsController.prototype = {

        setMessages: function (messages, shareUrl) {
            ShareToolsModelFactory.setMessages(messages, shareUrl);
        },

        openShareWindow: function (network) {
            var shareTargetUrl = this.getShareTargetUrl(network);
            var networkConfig = this.getNetworkConfig(network);

            if (networkConfig.popup) {
                window.open(shareTargetUrl, '_blank', 'width=626,height=235');
            } else {
                window.location.href = shareTargetUrl;
            }
        },

        getShareTargetUrl: function (network) {
            var networkConfig = this.getNetworkConfig(network);
            var parameters = this.getNetworkParameters(networkConfig);
            var urlQueryString = this.buildQueryStringFrom(parameters);

            return networkConfig.shareEndpoint + urlQueryString;
        },

        buildQueryStringFrom: function (parameters) {
            var queryString = '?';
            for (var parameterName in parameters) {
                if (parameters.hasOwnProperty(parameterName)) {
                    var parameterValue = parameters[parameterName];
                    queryString += parameterName + '=' + encodeURIComponent(parameterValue) + '&';
                }
            }
            // Remove trailing & or ?
            return queryString.slice(0, -1);
        },

        getNetworkParameters: function (networkConfig) {
            var parameters = {};

            // Get the current values of the dynamic parameters
            for (var dynamicParameterName in networkConfig.parameters()) {
                if (networkConfig.parameters().hasOwnProperty(dynamicParameterName)) {
                    parameters[dynamicParameterName] = networkConfig.parameters()[dynamicParameterName];
                }
            }
            return parameters;
        },

        getNetworkConfig: function (network) {
            return ShareToolsModelFactory.getNetworkConfig(network);
        },

        getNetworkNames: function () {
            var networks = [];

            for (var key in this.options.messages) {
                networks.push(key);
            }

            return networks;
        }

    };

    return ShareToolsController;

});

